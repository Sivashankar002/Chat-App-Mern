{"version":3,"sources":["components/Authentication/Signup.js","Context/ChatProvider.js","components/Authentication/Login.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/UserAvatar/UserBadgeItem.js","components/UserAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/ScrollableChat.js","components/SingleChat.js","components/ChatBox.js","components/ChatLoading.js","components/miscellaneous/SideDrawer.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","Pages/ChatPage.js","App.js","index.js"],"names":["Signup","show","setShow","useState","handleClick","toast","useToast","history","useHistory","name","setName","email","setEmail","confirmpassword","setConfirmpassword","password","setPassword","pic","setPic","loading","setLoading","_jsxs","VStack","spacing","color","children","FormControl","id","isRequired","_jsx","FormLabel","Input","placeholder","onChange","e","target","value","InputGroup","type","InputRightElement","width","onClick","Button","h","size","p","accept","pics","undefined","console","log","title","status","duration","isClosable","position","data","FormData","append","fetch","method","body","then","res","json","public_id","toString","catch","err","postDetails","files","colorScheme","style","marginTop","async","config","headers","axios","post","localStorage","setItem","JSON","stringify","pushState","error","description","response","message","isLoading","ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","user","setUser","selectedChat","setSelectedChat","chats","setChats","notification","setNotification","useEffect","userInfo","parse","getItem","push","Provider","Login","variant","Homepage","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","TabList","mb","Tab","TabPanels","TabPanel","getSender","loggedUser","users","_id","isSameSenderMargin","messages","i","userId","length","sender","isSameSender","isLastMessage","isSameUser","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","mr","UserBadgeItem","handleFunction","admin","Badge","px","py","cursor","CloseIcon","pl","UserListItem","_hover","background","Avatar","UpdateGroupChatModal","fetchAgain","setFetchAgain","fetchMessages","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","map","ml","query","get","handleSearch","Spinner","ScrollableChat","ScrollableFeed","display","Tooltip","label","placement","hasArrow","mt","backgroundColor","marginLeft","padding","maxWidth","content","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","ChatBox","ChatLoading","Stack","Skeleton","height","SideDrawer","loadingChat","setLoadingChat","accessChat","c","class","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","filter","n","as","rightIcon","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","AddIcon","latestMessage","substring","ChatPage","App","Route","path","component","exact","ReactDOM","render","BrowserRouter","ChakraProvider","document","getElementById"],"mappings":"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","file":"static/js/main.08ce489d.chunk.js","sourcesContent":["import React, {useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  useToast,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport axios from \"axios\";\r\n\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  \r\n  \r\n\r\n  const postDetails = (pics) => {\r\n    setLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please select an image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      //setLoading(false);\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"sivashankar\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/sivashankar/image/upload\", {\r\n        method: \"POST\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.public_id.toString());\r\n          setLoading(false);\r\n          console.log(data);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please select an image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please fill all the fields!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords do not match!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        { name, email, password, pic },\r\n        config\r\n      );\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.pushState(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\" color=\"black\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter your Email\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup>\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter your Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\" onClick={handleClick}>\r\n            <Button h=\"1.75rem\" size=\"sm\">\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n}\r\nexport default Signup;\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [chats, setChats] = useState([]);\r\n  const [notification, setNotification] = useState([]);\r\n\r\n  const history = useHistory(); // Ensure this is within a Router context\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n    console.log(\"User Info:\", userInfo);\r\n\r\n    if (!userInfo) {\r\n      history.push(\"/\"); // Redirect if no userInfo is found\r\n    }\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        selectedChat,\r\n        setSelectedChat,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook to use the Chat Context\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import React,{useState} from 'react';\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  VStack,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false); \r\n  const handleClick = () => setShow(!show);\r\n  const [email, setEmail] = useState(); \r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n  \r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n  \r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please fill all the fields!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    \r\n    \r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        {email, password },\r\n        config\r\n      );\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n   };\r\n  \r\n  return (\r\n    <VStack spacing=\"5px\" color=\"black\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter your Email\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup>\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter your Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            \r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        //style={{ marginTop: 15 }}\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Container,Box,Text, Tab,Tabs,TabPanel,TabPanels,TabList } from '@chakra-ui/react';\r\nimport React, { useEffect } from 'react';\r\nimport Signup from '../components/Authentication/Signup';\r\nimport Login from '../components/Authentication/Login';\r\nimport { useHistory } from 'react-router-dom';\r\nconst Homepage = () => {\r\n  const history = useHistory();\r\n  \r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    //console.log(\"User Info:\", user);\r\n    if (user) {\r\n      history.push(\"/chats\");\r\n    }\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\" color=\"black\">\r\n          Talk-A-Tive\r\n        </Text>\r\n      </Box>\r\n      <Box\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p={4}\r\n        borderRadius=\"lg\"\r\n        color=\"black\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Tabs variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab width=\"50%\">Login</Tab>\r\n            <Tab width=\"50%\">Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login/>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup/>\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","export const getSender = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser?._id ? users[1] : users[0];\r\n};\r\n\r\nexport const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};","import { ViewIcon } from '@chakra-ui/icons';\r\nimport { Button, IconButton, Image, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text, useDisclosure } from '@chakra-ui/react';\r\nimport React from 'react'\r\n\r\nconst ProfileModal = ({user,children}) => {\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" isOpen={isOpen} onClose={onClose} isCentered>\r\n        <ModalOverlay />\r\n          <ModalContent h=\"410px\">\r\n            <ModalHeader\r\n                      fontSize=\"40px\"\r\n                      fontFamily=\"Work sans\"\r\n                      d=\"flex\"\r\n                      justifyContent=\"center\"\r\n                  >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\">\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\" src={user.pic} alt={user.name} />\r\n              <Text\r\n                fontSize={{ base: \"28px\", md: \"30px\" }}\r\n                fontFamily=\"Work sans\">Email:{ user.email}</Text>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProfileModal;\r\n","import { CloseIcon } from '@chakra-ui/icons';\r\nimport { Badge } from '@chakra-ui/react';\r\nimport React from 'react'\r\n\r\nconst UserBadgeItem = ({ user, handleFunction,admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n}\r\n\r\nexport default UserBadgeItem;\r\n","import React from 'react'\r\n//import { ChatState } from '../../Context/ChatProvider';\r\nimport { Avatar, Box, Text } from '@chakra-ui/react';\r\n\r\nconst UserListItem = ({ user, handleFunction }) => {\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from '@chakra-ui/icons';\r\nimport { Box, Button, FormControl, IconButton, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Spinner, useDisclosure, useToast } from '@chakra-ui/react';\r\nimport React, { useState } from 'react'\r\nimport { ChatState } from '../../Context/ChatProvider';\r\nimport UserBadgeItem from '../UserAvatar/UserBadgeItem';\r\nimport axios from 'axios';\r\nimport UserListItem from '../UserAvatar/UserListItem';\r\n\r\nconst UpdateGroupChatModal = ({fetchAgain,setFetchAgain,fetchMessages}) => {\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const [groupChatName, setGroupChatName] = useState();\r\n    const [search, setSearch] = useState(\"\");\r\n    const [searchResult, setSearchResult] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [renameloading, setRenameLoading] = useState(false);\r\n    const toast = useToast();\r\n    \r\n    const { selectedChat, setSelectedChat, user } = ChatState();\r\n    \r\n    \r\n    const handleSearch = async (query) => { \r\n        setSearch(query);\r\n        if (!query) {\r\n          return;\r\n        }\r\n\r\n        try {\r\n          setLoading(true);\r\n          const config = {\r\n            headers: {\r\n              Authorization: `Bearer ${user.token}`,\r\n            },\r\n          };\r\n          const { data } = await axios.get(\r\n            `/api/user?search=${search}`,\r\n            config\r\n          );\r\n          console.log(data);\r\n          setLoading(false);\r\n          setSearchResult(data);\r\n        } catch (error) {\r\n          toast({\r\n            title: \"Error Occured!\",\r\n            description: \"Failed to Load the Search Results\",\r\n            status: \"error\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n            position: \"bottom-left\",\r\n          });\r\n          setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleRename = async () => {\r\n      if (!groupChatName) return;\r\n\r\n      try {\r\n        setRenameLoading(true);\r\n        const config = {\r\n          headers: {\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        const { data } = await axios.put(\r\n          `/api/chat/rename`,\r\n          {\r\n            chatId: selectedChat._id,\r\n            chatName: groupChatName,\r\n          },\r\n          config\r\n        );\r\n\r\n        console.log(data._id);\r\n        // setSelectedChat(\"\");\r\n        setSelectedChat(data);\r\n        setFetchAgain(!fetchAgain);\r\n        setRenameLoading(false);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: error.response.data.message,\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n        setRenameLoading(false);\r\n      }\r\n      setGroupChatName(\"\");\r\n    };\r\n\r\n    \r\n            \r\n    \r\n    const handleAddUser = async (user1) => { \r\n        if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n            toast({\r\n                title: \"User Already in group!\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            return;\r\n            }\r\n\r\n            if (selectedChat.groupAdmin._id !== user._id) {\r\n            toast({\r\n                title: \"Only admins can add someone!\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            return;\r\n            }\r\n\r\n            try {\r\n            setLoading(true);\r\n            const config = {\r\n                headers: {\r\n                Authorization: `Bearer ${user.token}`,\r\n                },\r\n            };\r\n            const { data } = await axios.put(\r\n                `/api/chat/groupadd`,\r\n                {\r\n                chatId: selectedChat._id,\r\n                userId: user1._id,\r\n                },\r\n                config\r\n            );\r\n\r\n            setSelectedChat(data);\r\n            setFetchAgain(!fetchAgain);\r\n            setLoading(false);\r\n            } catch (error) {\r\n            toast({\r\n                title: \"Error Occured!\",\r\n                description: error.response.data.message,\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            setLoading(false);\r\n            }\r\n            setGroupChatName(\"\");\r\n    };\r\n\r\n    const handleRemove = async (user1) => {\r\n      if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n        toast({\r\n          title: \"Only admins can remove someone!\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setLoading(true);\r\n        const config = {\r\n          headers: {\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        const { data } = await axios.put(\r\n          `/api/chat/groupremove`,\r\n          {\r\n            chatId: selectedChat._id,\r\n            userId: user1._id,\r\n          },\r\n          config\r\n        );\r\n\r\n        user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n        setFetchAgain(!fetchAgain);\r\n        fetchMessages();\r\n        setLoading(false);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: error.response.data.message,\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n        setLoading(false);\r\n      }\r\n      setGroupChatName(\"\");\r\n    };\r\n        \r\n    return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal isOpen={isOpen} onClose={onClose} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { ArrowBackIcon } from '@chakra-ui/icons';\r\nimport { Box, FormControl, IconButton, Input, Spinner, Text, useToast } from '@chakra-ui/react';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ChatState } from '../Context/ChatProvider';\r\nimport { getSender, getSenderFull } from '../config/ChatLogics';\r\nimport ProfileModal from './miscellaneous/ProfileModal';\r\nimport UpdateGroupChatModal from './miscellaneous/UpdateGroupChatModal';\r\nimport axios from 'axios';\r\nimport './styles.css';\r\n\r\nimport io from \"socket.io-client\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from '../animations/typing.json';\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n  \r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  \r\n    const {\r\n      selectedChat,\r\n      setSelectedChat,\r\n      user,\r\n      notification,\r\n      setNotification,\r\n    } = ChatState();\r\n\r\n    const fetchMessages = async () => {\r\n      if (!selectedChat) return;\r\n\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n\r\n        setLoading(true);\r\n\r\n        const { data } = await axios.get(\r\n          `/api/message/${selectedChat._id}`,\r\n          config\r\n        );\r\n        setMessages(data);\r\n        setLoading(false);\r\n\r\n        socket.emit(\"join chat\", selectedChat._id);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to Load the Messages\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    };\r\n\r\n\r\n    const sendMessage =async (event) => { \r\n        if (event.key === \"Enter\" && newMessage) {\r\n          socket.emit(\"stop typing\", selectedChat._id);\r\n          try {\r\n            const config = {\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n                Authorization: `Bearer ${user.token}`,\r\n            },\r\n            };\r\n            setNewMessage(\"\");\r\n            const { data } = await axios.post(\r\n            \"/api/message\",\r\n            {\r\n                content: newMessage,\r\n                chatId: selectedChat,\r\n            },\r\n            config\r\n            );\r\n            socket.emit(\"new message\", data);\r\n            setMessages([...messages, data]);\r\n        } catch (error) {\r\n            toast({\r\n            title: \"Error Occured!\",\r\n            description: \"Failed to send the Message\",\r\n            status: \"error\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n            position: \"bottom\",\r\n            });\r\n        }\r\n        }\r\n  };\r\n  \r\n    useEffect(() => {\r\n      socket = io(ENDPOINT);\r\n      socket.emit(\"setup\", user);\r\n      socket.on(\"connected\", () => setSocketConnected(true));\r\n      socket.on(\"typing\", () => setIsTyping(true));\r\n      socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n      // eslint-disable-next-line\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      fetchMessages();\r\n\r\n      selectedChatCompare = selectedChat;\r\n      // eslint-disable-next-line\r\n    }, [selectedChat]);\r\n  \r\n     useEffect(() => {\r\n       socket.on(\"message recieved\", (newMessageRecieved) => {\r\n         if (\r\n           !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n           selectedChatCompare._id !== newMessageRecieved.chat._id\r\n         ) {\r\n           if (!notification.includes(newMessageRecieved)) {\r\n             setNotification([newMessageRecieved, ...notification]);\r\n             setFetchAgain(!fetchAgain);\r\n           }\r\n         } else {\r\n           setMessages([...messages, newMessageRecieved]);\r\n         }\r\n       });\r\n     });\r\n  \r\n    const typingHandler = (e) => {\r\n        setNewMessage(e.target.value);\r\n\r\n        if (!socketConnected) return;\r\n\r\n        if (!typing) {\r\n         setTyping(true);\r\n         socket.emit(\"typing\", selectedChat._id);\r\n        }\r\n        let lastTypingTime = new Date().getTime();\r\n        var timerLength = 3000;\r\n        setTimeout(() => {\r\n          var timeNow = new Date().getTime();\r\n          var timeDiff = timeNow - lastTypingTime;\r\n          if (timeDiff >= timerLength && typing) {\r\n            socket.emit(\"stop typing\", selectedChat._id);\r\n            setTyping(false);\r\n          }\r\n        }, timerLength);\r\n     };\r\n    \r\n\r\n    return (\r\n      <>\r\n        {selectedChat ? (\r\n          <>\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              pb={3}\r\n              px={2}\r\n              w=\"100%\"\r\n              fontFamily=\"Work sans\"\r\n              d=\"flex\"\r\n              justifyContent={{ base: \"space-between\" }}\r\n              alignItems=\"center\"\r\n            >\r\n              <IconButton\r\n                d={{ base: \"flex\", md: \"none\" }}\r\n                icon={<ArrowBackIcon />}\r\n                onClick={() => setSelectedChat(\"\")}\r\n              />\r\n              {!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              )}\r\n            </Text>\r\n            <Box\r\n              d=\"flex\"\r\n              flexDir=\"column\"\r\n              justifyContent=\"flex-end\"\r\n              p={3}\r\n              bg=\"#E8E8E8\"\r\n              w=\"100%\"\r\n              h=\"100%\"\r\n              borderRadius=\"lg\"\r\n              overflowY=\"hidden\"\r\n            >\r\n              {loading ? (\r\n                <Spinner\r\n                  size=\"xl\"\r\n                  w={20}\r\n                  h={20}\r\n                  alignSelf=\"center\"\r\n                  margin=\"auto\"\r\n                />\r\n              ) : (\r\n                <div className=\"messages\">\r\n                  <ScrollableChat messages={messages} />\r\n                </div>\r\n              )}\r\n\r\n              <FormControl\r\n                onKeyDown={sendMessage}\r\n                id=\"first-name\"\r\n                isRequired\r\n                mt={3}\r\n              >\r\n                {istyping ? (\r\n                  <div>\r\n                    <Lottie\r\n                      options={defaultOptions}\r\n                      // height={50}\r\n                      width={70}\r\n                      style={{ marginBottom: 15, marginLeft: 0 }}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <></>\r\n                )}\r\n                <Input\r\n                  variant=\"filled\"\r\n                  bg=\"#E0E0E0\"\r\n                  placeholder=\"Enter a message..\"\r\n                  value={newMessage}\r\n                  onChange={typingHandler}\r\n                />\r\n              </FormControl>\r\n            </Box>\r\n          </>\r\n        ) : (\r\n          <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n            <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n              Click on a user to start chatting\r\n            </Text>\r\n          </Box>\r\n        )}\r\n      </>\r\n    );\r\n};\r\n\r\nexport default SingleChat;\r\n","import React from 'react'\r\nimport { ChatState } from '../Context/ChatProvider';\r\nimport { Box } from '@chakra-ui/react';\r\nimport SingleChat from './SingleChat';\r\n\r\nconst ChatBox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ChatBox;\r\n","import { Skeleton, Stack } from '@chakra-ui/react';\r\nimport React from 'react'\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import { Box,Text, Button, Tooltip, MenuButton, Menu, Avatar, MenuList, MenuItem, MenuDivider, Drawer, useDisclosure, DrawerOverlay, DrawerContent, DrawerHeader, DrawerBody, Input, useToast, Spinner } from '@chakra-ui/react';\r\nimport React, { useState } from 'react';\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { ChatState } from '../../Context/ChatProvider';\r\nimport ProfileModal from './ProfileModal';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport ChatLoading from '../ChatLoading';\r\nimport UserListItem from '../UserAvatar/UserListItem';\r\nimport { getSender } from '../../config/ChatLogics';\r\nimport NotificationBadge, { Effect } from \"react-notification-badge\";\r\n//import { config } from 'dotenv';\r\n\r\nconst SideDrawer = ()=> {\r\n    const [search, setSearch] = useState(\"\");\r\n    const [searchResult, setSearchResult] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [loadingChat, setLoadingChat] = useState(false);\r\n  \r\n    const { user, setSelectedChat, chats, setChats,notification,setNotification } = ChatState();\r\n  \r\n    const history = useHistory();\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const toast = useToast();\r\n  \r\n    const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n    \r\n    const handleSearch = async () => {\r\n      if (!search) {\r\n        //console.log(\"emptyuser\");\r\n        toast({\r\n          title: \"Please enter something in search\", status: \"warning\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"top-left\",\r\n        });\r\n        return;\r\n      }\r\n      try {\r\n        setLoading(true);\r\n        // console.log(\"founduser\");\r\n        // console.log(\"User Token:\", user.token);\r\n\r\n        const config = {\r\n          headers: {\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        const { data } = await axios.get(`/api/user?search=${search}`, config);  \r\n        // const { data } = await axios.get(\r\n        //   `http://localhost:5000/api/user?search=${search}`,\r\n        //   config\r\n        // );\r\n        setLoading(false);\r\n        setSearchResult(data);\r\n        \r\n\r\n      } catch (error) {\r\n        // console.error(\r\n        //   \"Search error:\",\r\n        //   error.response ? error.response.data : error.message\r\n        // );\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description:\"Failed to Load the Search Results\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom-left\",\r\n        });\r\n       // setLoading(false);\r\n      }\r\n    };\r\n  const accessChat = async (userId) => {\r\n      console.log(userId);\r\n      try {\r\n        setLoadingChat(true);\r\n\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n        if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n        setSelectedChat(data);\r\n        setLoadingChat(false);\r\n        onClose();\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error fetching the chat\",\r\n          description: error.message,\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom-left\",\r\n        });\r\n      }\r\n  };\r\n      return (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            bg=\"white\"\r\n            w=\"100%\"\r\n            p=\"5px 10px 5px 10px\"\r\n            borderWidth=\"5px\"\r\n          >\r\n            <Tooltip\r\n              label=\"Search Users to chat\"\r\n              hasArrow\r\n              placement=\"bottom-end\"\r\n            >\r\n              <Button variant=\"ghost\" onClick={onOpen}>\r\n                <i class=\"fas fa-search\"></i>\r\n                <Text d={{ base: \"none\", md: \"flex\" }} px=\"4\">\r\n                  Search User\r\n                </Text>\r\n              </Button>\r\n            </Tooltip>\r\n            <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n              Talk-A-Tive\r\n            </Text>\r\n            <div>\r\n              <Menu>\r\n                <MenuButton p={1}>\r\n                  <NotificationBadge\r\n                    count={notification.length}\r\n                    effect={Effect.SCALE}\r\n                  />\r\n                  <BellIcon fontSize=\"2xl\" m={1} />\r\n                </MenuButton>\r\n                <MenuList pl={2}>\r\n                  {!notification.length && \"No New Messages\"}\r\n                  {notification.map((notif) => (\r\n                    <MenuItem\r\n                      key={notif._id}\r\n                      onClick={() => {\r\n                        setSelectedChat(notif.chat);\r\n                        setNotification(\r\n                          notification.filter((n) => n !== notif)\r\n                        );\r\n                      }}\r\n                    >\r\n                      {notif.chat.isGroupChat\r\n                        ? `New Message in ${notif.chat.chatName}`\r\n                        : `New Message from ${getSender(\r\n                            user,\r\n                            notif.chat.users\r\n                          )}`}\r\n                    </MenuItem>\r\n                  ))}\r\n                </MenuList>\r\n              </Menu>\r\n              <Menu>\r\n                <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\r\n                  <Avatar\r\n                    size=\"sm\"\r\n                    cursor=\"pointer\"\r\n                    name={user.name}\r\n                    src={user.pic}\r\n                  />\r\n                </MenuButton>\r\n                <MenuList>\r\n                  <ProfileModal user={user}>\r\n                    <MenuItem>My Profile</MenuItem>{\" \"}\r\n                  </ProfileModal>\r\n\r\n                  <MenuDivider />\r\n                  <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n                </MenuList>\r\n              </Menu>\r\n            </div>\r\n          </Box>\r\n          <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n            <DrawerOverlay />\r\n            <DrawerContent>\r\n              <DrawerHeader borderBottomWidth=\"1px\"> Search Users</DrawerHeader>\r\n              <DrawerBody>\r\n                <Box d=\"flex\" pb={2}>\r\n                  <Input\r\n                    placeholder=\"Search by name or email\"\r\n                    mr={2}\r\n                    value={search}\r\n                    onChange={(e) => setSearch(e.target.value)}\r\n                  />\r\n                  <Button onClick={handleSearch}> Go</Button>\r\n                </Box>\r\n                {loading ? (\r\n                  <ChatLoading />\r\n                ) : (\r\n                  searchResult?.map((user) => (\r\n                    <UserListItem\r\n                      key={user._id}\r\n                      user={user}\r\n                      handleFunction={() => accessChat(user._id)}\r\n                    />\r\n                  ))\r\n                )}\r\n                {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n              </DrawerBody>\r\n            </DrawerContent>\r\n          </Drawer>\r\n        </>\r\n      );\r\n  };\r\n\r\nexport default SideDrawer;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from 'axios';\r\nimport { ChatState } from '../../Context/ChatProvider';\r\nimport UserListItem from '../UserAvatar/UserListItem';\r\nimport UserBadgeItem from '../UserAvatar/UserBadgeItem';\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n    \r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const [groupChatName, setGroupChatName] = useState();\r\n    const [selectedUsers, setSelectedUsers] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [searchResult, setSearchResult] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const toast = useToast();\r\n\r\n    const { user, chats, setChats } = ChatState();\r\n\r\n    const handleGroup = (userToAdd) => { \r\n        if (selectedUsers.includes(userToAdd)) {\r\n          toast({\r\n            title: \"User already added\",\r\n            status: \"warning\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n            position: \"top\",\r\n          });\r\n          return;\r\n        }\r\n\r\n        setSelectedUsers([...selectedUsers, userToAdd]);\r\n    };\r\n    const handleSearch =async (query) => { \r\n        setSearch(query);\r\n        if (!query) {\r\n        return;\r\n        }\r\n\r\n        try {\r\n        setLoading(true);\r\n        const config = {\r\n            headers: {\r\n            Authorization: `Bearer ${user.token}`,\r\n            },\r\n        };\r\n        const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n        console.log(data);\r\n        setLoading(false);\r\n        setSearchResult(data);\r\n        } catch (error) {\r\n        toast({\r\n            title: \"Error Occured!\",\r\n            description: \"Failed to Load the Search Results\",\r\n            status: \"error\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n            position: \"bottom-left\",\r\n        });\r\n        }\r\n    };\r\n    const handleSubmit = async() => {\r\n        if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n     };\r\n    const handleDelete = (delUser) => {\r\n        setSelectedUsers(\r\n          selectedUsers.filter((sel) => sel._id !== delUser._id)\r\n        );\r\n    };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={handleSubmit}>\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Box } from \"@chakra-ui/react\";\r\nimport ChatBox from \"../components/ChatBox\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { useState } from \"react\";\r\n\r\nconst ChatPage = () => {\r\n\r\n  const { user } = ChatState();\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n    return (\r\n      <div style={{ width: \"100%\" }}>\r\n        {user && <SideDrawer />}\r\n        <Box\r\n          d=\"flex\"\r\n          justifyContent=\"space-between\"\r\n          w=\"100%\"\r\n          h=\"91.5vh\"\r\n          p=\"10px\"\r\n        >\r\n          {user && (\r\n            <MyChats fetchAgain={fetchAgain}  />\r\n          )}\r\n\r\n          {user && (\r\n            <ChatBox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n          )}\r\n        </Box>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default ChatPage;\r\n","import \"./App.css\";\nimport { Route }  from \"react-router-dom\";\nimport Homepage from \"./Pages/Homepage\";\nimport ChatPage from \"./Pages/ChatPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Route path=\"/\" component={Homepage} exact />\n        <Route path=\"/chats\" component={ChatPage} />\n  \n    </div>\n  );\n}\n\nexport default App;\n","// import React from 'react';\n// import ReactDOM from 'react-dom/client';\n// import './index.css';\n// import App from './App';\n// import { ChakraProvider } from \"@chakra-ui/react\";\n// import { BrowserRouter } from \"react-router-dom\";\n// import ChatProvider from './Context/ChatProvider';\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <BrowserRouter>\n//     <ChatProvider>\n//       <ChakraProvider>\n//         <App />\n//       </ChakraProvider>\n//     </ChatProvider>\n//   </BrowserRouter>\n// );\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport App from \"./App\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <ChatProvider>\n      <ChakraProvider>\n        <App/>\n      </ChakraProvider>\n    </ChatProvider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}